{
  "version": 3,
  "sources": ["../../node_modules/.pnpm/@neos-project+neos-ui-extensibility@8.3.7/node_modules/@neos-project/neos-ui-extensibility/src/readFromConsumerApi.ts", "../../node_modules/.pnpm/@neos-project+neos-ui-extensibility@8.3.7/node_modules/@neos-project/neos-ui-extensibility/src/shims/vendor/react/index.js", "../../node_modules/.pnpm/@neos-project+neos-ui-extensibility@8.3.7/node_modules/@neos-project/neos-ui-extensibility/src/shims/vendor/react-redux/index.js", "../../node_modules/.pnpm/@neos-project+neos-ui-extensibility@8.3.7/node_modules/@neos-project/neos-ui-extensibility/src/shims/neosProjectPackages/neos-ui-decorators/index.js", "../../node_modules/.pnpm/@neos-project+neos-ui-extensibility@8.3.7/node_modules/@neos-project/neos-ui-extensibility/src/shims/neosProjectPackages/neos-ui-redux-store/index.js", "../../node_modules/.pnpm/@neos-project+neos-ui-extensibility@8.3.7/node_modules/@neos-project/neos-ui-extensibility/src/shims/neosProjectPackages/react-ui-components/index.js", "../../node_modules/.pnpm/@neos-project+neos-ui-extensibility@8.3.7/node_modules/@neos-project/neos-ui-extensibility/src/index.ts", "../Private/Editor/Editor.jsx", "../Private/Editor/manifest.js"],
  "sourcesContent": [null, null, null, null, null, null, null, "import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { neos } from \"@neos-project/neos-ui-decorators\";\nimport { actions, selectors } from \"@neos-project/neos-ui-redux-store\";\nimport { IconButton } from \"@neos-project/react-ui-components\";\n\nconst neosifier = neos((globalRegistry) => ({\n    i18nRegistry: globalRegistry.get(\"i18n\"),\n    nodeTypesRegistry: globalRegistry.get(\"@neos-project/neos-ui-contentrepository\"),\n    config: globalRegistry.get(\"frontendConfiguration\").get(\"Carbon.PreviewMode:Button\"),\n}));\n\nfunction MultipleToggleButtons(props) {\n    const registry = props?.nodeTypesRegistry?._registry;\n    const documentNodeType = props?.documentNode.nodeType;\n    const config = props?.config;\n\n    if (!registry || !documentNodeType || !config) {\n        return null;\n    }\n\n    return Object.entries(config).map(([key, settings]) => (\n        <SingleToggleButton\n            documentNodeType={documentNodeType}\n            registry={registry}\n            props={props}\n            viewEditModeName={key}\n            settings={settings}\n        />\n    ));\n}\n\nfunction SingleToggleButton({ documentNodeType, registry, props, viewEditModeName, settings }) {\n    const nodeTypeName = settings?.nodeTypeName;\n    if (!nodeTypeName) {\n        return null;\n    }\n    const [shouldRender, setShouldRender] = useState(false);\n    const icon = settings?.icon || \"fas fa-pencil\";\n    const label = settings?.label || null;\n    const { editPreviewMode, setEditPreviewMode, i18nRegistry } = props;\n\n    useEffect(() => {\n        // nodeTypesRegistry.isOfType(documentNode.nodeType, nodeTypeName) doesn't return superTypes\n        // so we need to implement our own function to check if the node has the mixin\n        setShouldRender(hasMixin({ documentNodeType, nodeTypeName, registry }));\n\n        // this will cause the current page to reload, but it's a protection\n        // mechanism prevent this mode to be activated on page that has not this node type\n        if (shouldRender === false && editPreviewMode === viewEditModeName) {\n            setEditPreviewMode(\"inPlace\");\n        }\n    }, [props]);\n\n    if (!shouldRender) {\n        return null;\n    }\n\n    const title = label ? i18nRegistry.translate(label) : null;\n\n    return (\n        <IconButton\n            icon={icon}\n            isPressed={editPreviewMode === viewEditModeName}\n            aria-label={title}\n            title={title}\n            onClick={() => {\n                setEditPreviewMode(editPreviewMode === viewEditModeName ? \"inPlace\" : viewEditModeName);\n            }}\n        />\n    );\n}\n\nconst connector = connect(\n    (state) => {\n        return {\n            documentNode: selectors.CR.Nodes.documentNodeSelector(state),\n            editPreviewMode: selectors.UI.EditPreviewMode.currentEditPreviewMode(state),\n        };\n    },\n    {\n        setEditPreviewMode: actions.UI.EditPreviewMode.set,\n    },\n);\n\nfunction hasMixin({ documentNodeType, nodeTypeName, registry }) {\n    if (documentNodeType === nodeTypeName) {\n        return true;\n    }\n    for (const item of registry) {\n        if (item.key !== documentNodeType) {\n            continue;\n        }\n        const superTypes = item?.value?.superTypes;\n        if (!superTypes) {\n            return false;\n        }\n        for (const key in superTypes) {\n            if (key == nodeTypeName) {\n                return superTypes[key];\n            }\n        }\n        return false;\n    }\n    return false;\n}\n\nexport default neosifier(connector(MultipleToggleButtons));\n", "import manifest from \"@neos-project/neos-ui-extensibility\";\nimport Editor from \"./Editor\";\n\nmanifest(\"Carbon.PreviewMode:Button\", {}, (globalRegistry) => {\n    const containerRegistry = globalRegistry.get(\"containers\");\n    containerRegistry.set(\"SecondaryToolbar/Right/SideMenuViewToggleButton\", Editor, \"start\");\n});\n"],
  "mappings": "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",
  "names": ["readFromConsumerApi", "key", "args", "init_readFromConsumerApi", "__esmMin", "require_react", "__commonJSMin", "exports", "module", "init_readFromConsumerApi", "readFromConsumerApi", "require_react_redux", "__commonJSMin", "exports", "module", "init_readFromConsumerApi", "readFromConsumerApi", "require_neos_ui_decorators", "__commonJSMin", "exports", "module", "init_readFromConsumerApi", "readFromConsumerApi", "require_neos_ui_redux_store", "__commonJSMin", "exports", "module", "init_readFromConsumerApi", "readFromConsumerApi", "require_react_ui_components", "__commonJSMin", "exports", "module", "init_readFromConsumerApi", "readFromConsumerApi", "init_readFromConsumerApi", "dist_default", "readFromConsumerApi", "import_react", "import_react_redux", "import_neos_ui_decorators", "import_neos_ui_redux_store", "import_react_ui_components", "neosifier", "globalRegistry", "MultipleToggleButtons", "props", "registry", "documentNodeType", "config", "key", "settings", "React", "SingleToggleButton", "viewEditModeName", "nodeTypeName", "shouldRender", "setShouldRender", "icon", "label", "editPreviewMode", "setEditPreviewMode", "i18nRegistry", "hasMixin", "title", "connector", "state", "item", "superTypes", "Editor_default", "dist_default", "globalRegistry", "Editor_default"]
}
